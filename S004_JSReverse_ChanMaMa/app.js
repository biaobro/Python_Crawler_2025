const s = require('crypto-js')
const c = require('pako')

n = s.enc.Utf8.parse(27..toString(36).toLowerCase().split("").map((function (t) {
        return String.fromCharCode(t.charCodeAt() + -39)
    }
)).join("") + 24901..toString(36).toLowerCase() + 33..toString(36).toLowerCase().split("").map((function (t) {
        return String.fromCharCode(t.charCodeAt() + -39)
    }
)).join("") + 976..toString(36).toLowerCase() + 20..toString(36).toLowerCase().split("").map((function (t) {
        return String.fromCharCode(t.charCodeAt() + -39)
    }
)).join("") + function () {
    var t = Array.prototype.slice.call(arguments)
        , e = t.shift();
    return t.reverse().map((function (t, n) {
            return String.fromCharCode(t - e - 24 - n)
        }
    )).join("")
}(10, 127, 154, 91, 151, 91, 136) + 11..toString(36).toLowerCase() + 13..toString(36).toLowerCase().split("").map((function (t) {
        return String.fromCharCode(t.charCodeAt() + -13)
    }
)).join(""))

e = ""

a = s.AES.decrypt(e, n, {
    mode: s.mode.ECB,
    padding: s.pad.Pkcs7
}),

l = function(t) {
    var e, n, i = t.words.length, a = new Uint8Array(t.sigBytes), o = 0;
    for (n = 0; n < i; n++)
        e = t.words[n],
            a[o++] = e >> 24,
            a[o++] = e >> 16 & 255,
            a[o++] = e >> 8 & 255,
            a[o++] = 255 & e;
    return a
}

o = l(a),
r = c.ungzip(o, {
    to: "string"
}),

console.log(r)